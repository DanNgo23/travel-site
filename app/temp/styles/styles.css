/*! normalize.css v7.0.0 | MIT License | github.com/necolas/normalize.css */

/* Document
   ========================================================================== */

/**
 * 1. Correct the line height in all browsers.
 * 2. Prevent adjustments of font size after orientation changes in
 *    IE on Windows Phone and in iOS.
 */

html {
  line-height: 1.15; /* 1 */
  -ms-text-size-adjust: 100%; /* 2 */
  -webkit-text-size-adjust: 100%; /* 2 */
}

/* Sections
   ========================================================================== */

/**
 * Remove the margin in all browsers (opinionated).
 */

body {
  margin: 0;
}

/**
 * Add the correct display in IE 9-.
 */

article,
aside,
footer,
header,
nav,
section {
  display: block;
}

/**
 * Correct the font size and margin on `h1` elements within `section` and
 * `article` contexts in Chrome, Firefox, and Safari.
 */

h1 {
  font-size: 2em;
  margin: 0.67em 0;
}

/* Grouping content
   ========================================================================== */

/**
 * Add the correct display in IE 9-.
 * 1. Add the correct display in IE.
 */

figcaption,
figure,
main { /* 1 */
  display: block;
}

/**
 * Add the correct margin in IE 8.
 */

figure {
  margin: 1em 40px;
}

/**
 * 1. Add the correct box sizing in Firefox.
 * 2. Show the overflow in Edge and IE.
 */

hr {
  -webkit-box-sizing: content-box;
          box-sizing: content-box; /* 1 */
  height: 0; /* 1 */
  overflow: visible; /* 2 */
}

/**
 * 1. Correct the inheritance and scaling of font size in all browsers.
 * 2. Correct the odd `em` font sizing in all browsers.
 */

pre {
  font-family: monospace, monospace; /* 1 */
  font-size: 1em; /* 2 */
}

/* Text-level semantics
   ========================================================================== */

/**
 * 1. Remove the gray background on active links in IE 10.
 * 2. Remove gaps in links underline in iOS 8+ and Safari 8+.
 */

a {
  background-color: transparent; /* 1 */
  -webkit-text-decoration-skip: objects; /* 2 */
}

/**
 * 1. Remove the bottom border in Chrome 57- and Firefox 39-.
 * 2. Add the correct text decoration in Chrome, Edge, IE, Opera, and Safari.
 */

abbr[title] {
  border-bottom: none; /* 1 */
  text-decoration: underline; /* 2 */
  -webkit-text-decoration: underline dotted;
          text-decoration: underline dotted; /* 2 */
}

/**
 * Prevent the duplicate application of `bolder` by the next rule in Safari 6.
 */

b,
strong {
  font-weight: inherit;
}

/**
 * Add the correct font weight in Chrome, Edge, and Safari.
 */

b,
strong {
  font-weight: bolder;
}

/**
 * 1. Correct the inheritance and scaling of font size in all browsers.
 * 2. Correct the odd `em` font sizing in all browsers.
 */

code,
kbd,
samp {
  font-family: monospace, monospace; /* 1 */
  font-size: 1em; /* 2 */
}

/**
 * Add the correct font style in Android 4.3-.
 */

dfn {
  font-style: italic;
}

/**
 * Add the correct background and color in IE 9-.
 */

mark {
  background-color: #ff0;
  color: #000;
}

/**
 * Add the correct font size in all browsers.
 */

small {
  font-size: 80%;
}

/**
 * Prevent `sub` and `sup` elements from affecting the line height in
 * all browsers.
 */

sub,
sup {
  font-size: 75%;
  line-height: 0;
  position: relative;
  vertical-align: baseline;
}

sub {
  bottom: -0.25em;
}

sup {
  top: -0.5em;
}

/* Embedded content
   ========================================================================== */

/**
 * Add the correct display in IE 9-.
 */

audio,
video {
  display: inline-block;
}

/**
 * Add the correct display in iOS 4-7.
 */

audio:not([controls]) {
  display: none;
  height: 0;
}

/**
 * Remove the border on images inside links in IE 10-.
 */

img {
  border-style: none;
}

/**
 * Hide the overflow in IE.
 */

svg:not(:root) {
  overflow: hidden;
}

/* Forms
   ========================================================================== */

/**
 * 1. Change the font styles in all browsers (opinionated).
 * 2. Remove the margin in Firefox and Safari.
 */

button,
input,
optgroup,
select,
textarea {
  font-family: sans-serif; /* 1 */
  font-size: 100%; /* 1 */
  line-height: 1.15; /* 1 */
  margin: 0; /* 2 */
}

/**
 * Show the overflow in IE.
 * 1. Show the overflow in Edge.
 */

button,
input { /* 1 */
  overflow: visible;
}

/**
 * Remove the inheritance of text transform in Edge, Firefox, and IE.
 * 1. Remove the inheritance of text transform in Firefox.
 */

button,
select { /* 1 */
  text-transform: none;
}

/**
 * 1. Prevent a WebKit bug where (2) destroys native `audio` and `video`
 *    controls in Android 4.
 * 2. Correct the inability to style clickable types in iOS and Safari.
 */

button,
html [type="button"], /* 1 */
[type="reset"],
[type="submit"] {
  -webkit-appearance: button; /* 2 */
}

/**
 * Remove the inner border and padding in Firefox.
 */

button::-moz-focus-inner,
[type="button"]::-moz-focus-inner,
[type="reset"]::-moz-focus-inner,
[type="submit"]::-moz-focus-inner {
  border-style: none;
  padding: 0;
}

/**
 * Restore the focus styles unset by the previous rule.
 */

button:-moz-focusring,
[type="button"]:-moz-focusring,
[type="reset"]:-moz-focusring,
[type="submit"]:-moz-focusring {
  outline: 1px dotted ButtonText;
}

/**
 * Correct the padding in Firefox.
 */

fieldset {
  padding: 0.35em 0.75em 0.625em;
}

/**
 * 1. Correct the text wrapping in Edge and IE.
 * 2. Correct the color inheritance from `fieldset` elements in IE.
 * 3. Remove the padding so developers are not caught out when they zero out
 *    `fieldset` elements in all browsers.
 */

legend {
  -webkit-box-sizing: border-box;
          box-sizing: border-box; /* 1 */
  color: inherit; /* 2 */
  display: table; /* 1 */
  max-width: 100%; /* 1 */
  padding: 0; /* 3 */
  white-space: normal; /* 1 */
}

/**
 * 1. Add the correct display in IE 9-.
 * 2. Add the correct vertical alignment in Chrome, Firefox, and Opera.
 */

progress {
  display: inline-block; /* 1 */
  vertical-align: baseline; /* 2 */
}

/**
 * Remove the default vertical scrollbar in IE.
 */

textarea {
  overflow: auto;
}

/**
 * 1. Add the correct box sizing in IE 10-.
 * 2. Remove the padding in IE 10-.
 */

[type="checkbox"],
[type="radio"] {
  -webkit-box-sizing: border-box;
          box-sizing: border-box; /* 1 */
  padding: 0; /* 2 */
}

/**
 * Correct the cursor style of increment and decrement buttons in Chrome.
 */

[type="number"]::-webkit-inner-spin-button,
[type="number"]::-webkit-outer-spin-button {
  height: auto;
}

/**
 * 1. Correct the odd appearance in Chrome and Safari.
 * 2. Correct the outline style in Safari.
 */

[type="search"] {
  -webkit-appearance: textfield; /* 1 */
  outline-offset: -2px; /* 2 */
}

/**
 * Remove the inner padding and cancel buttons in Chrome and Safari on macOS.
 */

[type="search"]::-webkit-search-cancel-button,
[type="search"]::-webkit-search-decoration {
  -webkit-appearance: none;
}

/**
 * 1. Correct the inability to style clickable types in iOS and Safari.
 * 2. Change font properties to `inherit` in Safari.
 */

::-webkit-file-upload-button {
  -webkit-appearance: button; /* 1 */
  font: inherit; /* 2 */
}

/* Interactive
   ========================================================================== */

/*
 * Add the correct display in IE 9-.
 * 1. Add the correct display in Edge, IE, and Firefox.
 */

details, /* 1 */
menu {
  display: block;
}

/*
 * Add the correct display in all browsers.
 */

summary {
  display: list-item;
}

/* Scripting
   ========================================================================== */

/**
 * Add the correct display in IE 9-.
 */

canvas {
  display: inline-block;
}

/**
 * Add the correct display in IE.
 */

template {
  display: none;
}

/* Hidden
   ========================================================================== */

/**
 * Add the correct display in IE 10-.
 */

[hidden] {
  display: none;
}

/* create a mixin that passes styles along only to screens that are larger than what we consider to be a smartphone size */

body {
    font-family: 'Roboto', sans-serif;
    color: #333;
}

img {
    max-width: 100%;
    height: auto;
}

/* the asterisk means select every single element on the page */

* {
    /* makes sure the web browser honor our declared width values of 33.33% and 66.66% */
    /* our padding will still be applied but it won't affect the calculated width values */
    -webkit-box-sizing: border-box;
            box-sizing: border-box;
}

a {
    /* need to make sure the variables.css file where $mainOrange is defined is imported before this _global.css file */
    color: #d59541;
}

.large-hero {
    border-bottom: 10px solid #2f5572;
    position: relative;
}

.large-hero__image {
        /* by default, web browsers treat image elements as in-line level elements, not block level */
        /* the browser thinks the image is similar to a line of text */
        /* when the browser thinks this might be a line of text,
        /* it wants to leave a little room or white space for the bottom part of certain letters that hang below like a g or y */
        /* by declaring that the image should be a block level element, we are telling the web browser to treat the image almost as a div;
        /* the web browser now treats it as a rectangle that can align perfectly without worrying about leaving any room for bottom parts of letters */
        /* the default is display: inline, in which case the gap would come back */
        display: block;
    }

.large-hero__text-content {
        padding-top: 88px;
        position: absolute;
        top: 50%;
        -webkit-transform: translateY(-50%);
                transform: translateY(-50%);
        left: 0;
        width: 100%;
        text-align: center;
    }

@media (min-width: 800px) {

.large-hero__text-content {
            padding-top: 60px
    }
    }

.large-hero__title {
        font-weight: 300;
        color: #2f5572;
        margin: 0;
        font-size: 2.4rem;
        
    }

/* access our mixin atSmall */

@media (min-width: 530px) {

.large-hero__title {
            font-size: 4.8rem
        
    }
    }

.large-hero__subtitle {
        font-weight: 300;
        color: #2f5572;
        font-size: 1.5rem;
        margin: 0;
    }

@media (min-width: 530px) {

.large-hero__subtitle {
            font-size: 2.9rem
    }
    }

.large-hero__description {
        color: #FFF;
        font-size: 1.1rem;
        font-weight: 100;
        text-shadow: 2px 2px 0 rgba(0, 0, 0, .1);
        max-width: 30rem;
        margin-left: auto;
        margin-right: auto;
    }

@media (min-width: 530px) {

.large-hero__description {
            font-size: 1.875rem
    }
    }

.btn {
    background-color: #2f5572;
    color: #FFF;
    text-decoration: none;
    padding: 0.75rem 1.2rem;
    display: inline-block;
}

.btn--orange {
        background-color: #d59541;
    }

.btn--large {
        /* font-size will default to 1 rem */
        padding: 1.1rem 1.9rem;
    }

@media (min-width: 530px) {

.btn--large {
        font-size: 1.25rem
    }
    }

.wrapper {
    /* the negative margin on the right still exists */
    /* it's where the padding or gutter for the second column is */
    /* but because we chose the wrapper to have overflow hidden, we choose not to see it */
    overflow: hidden;
    
    padding-left: 18px;
    padding-right: 18px;
    /* now that we applied box-sizing: border-box globally to all elements on the page */
    /* and when we did that, actually decreased the max-width of
    /* the "Here's how we got started" wrapper element by 36 pixels because of the left and right padding of 18px each */
    /* to account for that change, we add 36px to the max-width value */
    max-width: 1236px;
    /* we want it to be horizontally (left and right) centered on the screen */
    margin-left: auto;
    margin-right: auto;
}

.wrapper--medium {
        max-width: 976px;
    }

.wrapper--narrow {
        max-width: 470px;
    }

.wrapper--no-padding-until-medium {
        /* offset left and right padding */
        padding-left: 0;
        padding-right: 0;
    }

/* but for screens considered medium or larger, we do want padding */

@media (min-width: 800px) {

.wrapper--no-padding-until-medium {
            padding-left: 18px;
            padding-right: 18px
    }
    }

.wrapper--no-padding-until-large {
        /* offset left and right padding */
        padding-left: 0;
        padding-right: 0;
    }

/* but for screens considered medium or larger, we do want padding */

@media (min-width: 1010px) {

.wrapper--no-padding-until-large {
            padding-left: 18px;
            padding-right: 18px
    }
    }

/* any wrapper that is nested within another wrapper should no longer have any horizontal padding */

.wrapper .wrapper {
        padding-left: 0;
        padding-right: 0;
    }

.wrapper--b-margin {
        /*our baseline margin bottom */
        margin-bottom: 1rem;
    }

@media (min-width: 530px) {

.wrapper--b-margin {
            margin-bottom: 3.875rem
    }
    }

/* a new class that has the responsibility of adding top and bottom padding for each section on the page */

.page-section {
    padding: 1.2rem 0;
}

@media (min-width: 800px) {

.page-section {
        /* the first will be top and bottom padding values */
        /* the second is horizontal (left and right) padding */
        padding: 4.5rem 0
}
    }

.page-section--no-b-padding-until-medium {
        padding-bottom: 0;
    }

@media (min-width: 800px) {

.page-section--no-b-padding-until-medium {
            padding-bottom: 4.5rem
    }
    }

.page-section--no-b-padding-until-large {
        padding-bottom: 0;
    }

@media (min-width: 1010px) {

.page-section--no-b-padding-until-large {
            padding-bottom: 4.5rem
    }
    }

/* a modifier class to turn the background blue */

.page-section--blue {
        background-color: #2f5572;
        /* make the text white */
        color: #FFF;
    }

.page-section--testimonials {
        
        /* for smaller screens, this is the baseline */
        /* hexadecimal color code for a nice light blue */
        background-color: #e0e6ef;
    }

@media (min-width: 1010px) {

.page-section--testimonials {
            /* the ampersand & will select the page section --testimonials class */
            /* we say only if that element also has a class of lazyloaded do we want the following css to be applied */
    }
            .page-section--testimonials.lazyloaded {
                /* tell the image to be aligned at the top of the section, and horizontally, to be aligned in the center */
                /* the image should not repeat; only display once */
                background: url('../../assets/images/testimonials-bg.jpg') top center no-repeat;
                /* shrink or stretch the image to always be large or small enough to perfectly cover the containing div */
                background-size: cover;
            }
    }

/* create a class that styles the headline block */

.headline {
    font-size: 1.9rem;
    font-weight: 300;
    color: #2f5572;
}

@media (min-width: 530px) {

.headline {
        font-size: 2.875rem
}
    }

/* create a modifier rule that centers the block horizontally */

.headline--centered {
        text-align: center;
    }

/* create a modifier rule that turns the text orange */

.headline--orange {
        color: #d59541;
    }

/* create a modifier rule that reduces the size of the text */

.headline--small {
        font-size: 1.2rem;
    }

@media (min-width: 530px) {

.headline--small {
            font-size: 1.875rem
    }
    }

/* create a modifier rule that splits the text into two lines and centers it */

.headline--narrow {
        max-width: 500px;
        /* have it horizontally centered */
        margin-left: auto;
        margin-right: auto;
    }

/* create a modifier rule that uses a lighter/thinner font weight */

.headline--light {
        font-weight: 100;
    }

/* create a modifier rule/class that decreases the margin below the first headline */

.headline--b-margin-small {
         /* the nice thing about using em in this context is it's relative to the font size of the element itself */
        /* which means we can re-use this --b-margin-large class on headlines that have different font sizes and this will open scale with it really nicely */
        margin-bottom: .5em;
    }

/* create a modifier rule/class that increases the margin below the second headline */

.headline--b-margin-large {
        /* the nice thing about using em in this context is it's relative to the font size of the element itself */
        /* which means we can re-use this --b-margin-large class on headlines that have different font sizes and this will open scale with it really nicely */
        margin-bottom: 1.6em;
    }

.headline--no-t-margin {
        margin-top: 0;
    }

.row {
    
    /* create pseudo or fake content with css */
    
    /* begin equal height rules, target the appropriate modifier class */
    /* once a screen is large enough to be considered medium, */
    /* we will apply a bit of css to make all of the columns equal height */
    
    /* begin equal height rules, target the appropriate modifier class */
    /* once a screen is large enough to be considered medium, */
    /* we will apply a bit of css to make all of the columns equal height */
    
}

/* will add blank space after all of the content in the main row div */

.row::after {
        content: "";
        /* clear our floats */
        clear: both;
        display: table;
    }

/* and we do this by adding 80 pixels of top padding to the top of the testimonials row */

.row--t-padding {
        padding-top: 80px;
    }

/* and giving it a negative right margin that matches the padding value */

.row--gutters {
        margin-right: -65px;
    }

/* counteract the right padding by selecting the main parent row with a modifier class of "gutters" */

.row--gutters-large {
        margin-right: -100px;
    }

/* and pulled the images up 80 pixels from where they would normally sit, we can counteract this overlapping issue */

.row--gutters-small {
        margin-right: -45px;
    }

/* for our gutters modifier class, for any direct children that are div, so all of the columns */

.row--gutters > div {
        padding-right: 65px;
    }

/* for our gutters-large modifier class, for any direct children that are div, so all of the columns */

.row--gutters-large > div {
        padding-right: 100px;
    }

/* for small gutters, look inside that element for direct descendants that have a tag type of div */

.row--gutters-small > div {
        padding-right: 45px;
    }

/* because we use position: relative to pull the testimonial images up out of their natural position, */

.row__b-margin-until-medium {
        /* add this margin until a screen is large enough to be considered medium */
        margin-bottom: 1rem;
    }

/* only at medium screens or larger do we want these rules to be applied */

@media (min-width: 800px) {
        
        .row__b-margin-until-medium {
            margin-bottom: 0;
        }
        
        .row__medium-4 {
        float: left;
        /* 100% divided by our 12 column grid means each one of our 12 grid bars is 8.33% */
        /* the left side takes up 4 grid bars so 8.33% * 4 = 33.33% */
        width: 33.33%;
        }
    
        .row__medium-4--larger {
            width: 37%;
        }
        
        .row__medium-6 {
            float: left;
            width: 50%;
        }
        
        .row__medium-8 {
            float: left;
            width: 66.66%;
        }
        
        .row__medium-8--smaller {
            width: 63%;
        }
    }

/* only at medium screens or larger do we want these rules to be applied */

@media (min-width: 1010px) {
        
        .row__b-margin-until-large {
            margin-bottom: 0;
        }
        
        .row__large-4 {
        float: left;
        /* 100% divided by our 12 column grid means each one of our 12 grid bars is 8.33% */
        /* the left side takes up 4 grid bars so 8.33% * 4 = 33.33% */
        width: 33.33%;
        }
    
        .row__large-4--larger {
            width: 37%;
        }
        
        .row__large-6 {
            float: left;
            width: 50%;
        }
        
        .row__large-8 {
            float: left;
            width: 66.66%;
        }
        
        .row__large-8--smaller {
            width: 63%;
        }
    }

/* only apply this modifier class if the browser supports flexbox */

.flexbox .row--equal-height-at-medium {
        
        /* the ampersand & will give us the selector - '&--equal-height-at-medium'
        /* only select direct descendants that have a tag type of div */
    }

@media (min-width: 800px) {

.flexbox .row--equal-height-at-medium {
            /* tell the parent row div to use flexbox */
            /* by itself, this won't do anything */
            /* however, if we also tell each of the three testimonial columns to use flexbox, */
            /* instead of being floated to the left, the contents of each will flex to match the tallest element */
            display: -webkit-box;
            display: -ms-flexbox;
            display: flex
    }
    }

/* stop being floated, and start using flexbox instead */

.flexbox .row--equal-height-at-medium > div {
            float: none;
            display: -webkit-box;
            display: -ms-flexbox;
            display: flex;
        }

/* only apply this modifier class if the browser supports flexbox */

.flexbox .row--equal-height-at-large {
        
        /* the ampersand & will give us the selector - '&--equal-height-at-medium'
        /* only select direct descendants that have a tag type of div */
    }

@media (min-width: 1010px) {

.flexbox .row--equal-height-at-large {
            /* tell the parent row div to use flexbox */
            /* by itself, this won't do anything */
            /* however, if we also tell each of the three testimonial columns to use flexbox, */
            /* instead of being floated to the left, the contents of each will flex to match the tallest element */
            display: -webkit-box;
            display: -ms-flexbox;
            display: flex
    }
    }

/* stop being floated, and start using flexbox instead */

.flexbox .row--equal-height-at-large > div {
            float: none;
            display: -webkit-box;
            display: -ms-flexbox;
            display: flex;
        }

/* any paragraph element nested in the .generic-content-container element */

.generic-content-container p {
        font-weight: 300;
        line-height: 1.65;
        /* our baseline does not need a font-size at all because it will default to 1 rem */
        
        /* the first two 0s means to not have any top or right margin */
        /* the numbers work in a clockwise fashion- top, right, bottom, left */
        margin: 0 0 1.8rem 0;
    }

/* use a media query mixin */

@media (min-width: 530px) {

.generic-content-container p {
            /* once a screen is large enough to be considered small (instead of tiny), use the 1.125 size */
            font-size: 1.125rem
    }
    }

/* any links that live within a paragraph within the .generic-content-container class */

.generic-content-container p a {
        font-weight: 700;
    }

.section-title {
    font-size: 2.55rem;
    font-weight: 300;
    text-align: center;
}

@media (min-width: 530px) {

.section-title {
        font-size: 3.75rem
}
    }

/* any strong tags nested within the section-title class should have a font-weight of 500 */

.section-title strong {
        font-weight: 500;
    }

/* a modifier class that assigns the color of our $mainBlue variable */

.section-title--blue {
        color: #2f5572;
    }

/* in the modal, reduce the margin between "Get in Touch" and the below text */

.section-title--less-margin {
        margin-bottom: 1.3rem;
        margin-top: 0;
    }

/* the double underscore means it is an element that belongs to the block section-title */

.section-title__icon {
        /* push the icon down 8 pixels */
        position: relative;
        top: 8px;
        
        /* tell our baseline styles to make that element a block level element, which will drop the text after it onto a new line */
        display: block;
        /* now that it is a block level element, make sure it is horizontally centered */
        margin-left: auto;
        margin-right: auto;
        /* add some margin vertically between the icon and the text */
        margin-bottom: 0.6rem;
    }

@media (min-width: 530px) {

.section-title__icon {
            margin-right: 0.5rem;
            /* offset the left margin that we set for small screens */
            margin-left: 0;
            
            /* undo for larger screens */
            margin-bottom: 0;
            /* tell the icon to be an inline-block level element- so that on larger screens, it won't drop the text down to a new line */
            display: inline-block
    }
    }

.feature-item {
    /* because we want the icon to be positioned in relation to it's parent, we give the parent element position relative */
    position: relative;
    
    /* add vertical spacing between the elements */
    padding-bottom: 2.5rem;
}

/* for screen sizes of small or larger (but not tiny nor extra small) */

@media (min-width: 530px) {

.feature-item {
        padding-left: 94px
}
    }

.feature-item__icon {
        display: block;
        margin: 0 auto;
    }

@media (min-width: 530px) {

.feature-item__icon {
            position: absolute;
            left: 0
    }
    }

.feature-item__title {
        font-size: 1.6rem;
        font-weight: 300;
        /* reduce the top margin a bit */
        margin-top: 0.7em;
        
        margin-bottom: 0.8rem;
        /* horizontally center the title on very small screens */
        text-align: center;
    }

@media (min-width: 530px) {

.feature-item__title {
            /* keep the title left-aligned on larger screens */
            text-align: left;
            /* reset the top margin back */
            margin-top: 1em;
            
            font-size: 1.875rem
    }
    }

.testimonial {
    background-color: rgba(255, 255, 255, 0.8);
    /* no padding on the top, some on the right, 1 pixel of bottom padding, some on the left */
    padding: 0 18px 1px 18px;
    
    /* we use position-relative on the testimonial images to pull them up 80 pixels out of their natural position */
    /* on larger screens that is okay because all of the columns sit by each other side by side */
    /* on mobile, the three testimonials will stack on top of each other */
    /* need to add some margin-bottom to each testimonial on smaller screens to counteract this overlapping issue */
    /* we have the bottom margin for smaller screens */
    margin-bottom: 98px;
}

@media (min-width: 1010px) {

.testimonial {
        /* we do not have that bottom margin for larger screens (size medium or larger) */
        margin-bottom: 0;
        padding: 0 1.8125rem 1px 1.8125rem
}
    }

/* eliminate the light blue gap that is being created by the margin-bottom added to testimonials */

.testimonial--last {
        margin-bottom: 0;
    }

.testimonial__photo {
        /* create rounded corners; to get a circle, have border radius to be half of height/width in pixels */
        border-radius: 80px;
        overflow: hidden;
        width: 160px;
        height: 160px;
        
        /* center the image horizontally */
        /* give the image a bit of negative bottom margin so that the text also moves up 80 pixels with the image */
        margin: 0 auto -80px auto;
        
        /* we want the top half of the image to violate the edge */
        /* we need to pull the image up half of its height, which is 80 pixels */
        position: relative;
        top: -80px;
        
        /* give the div a 6 pixel border */
        border: 6px solid rgba(255, 255, 255, 0.8);
    }

.testimonial__title {
        color: #2f5572;
        text-align: center;
        font-size: 1.5rem;
        font-weight: 500;
        /* reduce the space between the image and the name below the image */
        margin: 0;
    }

.testimonial__subtitle {
        color: #d59541;
        text-align: center;
        font-size: 0.9375;
        font-weight: 400;
        /* reduce the space between the top heading (the name) and the bottom heading (the n Time Escaper) */
        margin: 0.25rem 0 1rem 0;
    }

/* Do not edit modules/_sprite directly, as it is generated automatically by Gulp.
   Instead, edit gulp/templates/sprite. */

/* the gulp svgSprite package makes use of the moustache template system */

/* within these two shapes lines, any code that we include will be looped/repeated through for each icon */

/* any code we include between 'first' will only run once for the first item that gets looped through */

/* a baseline icon rule */

.icon {
            /* provide a url path that points towards the sprite svg file */
            /* the sprite-e79e95cc.svg variable is responsible for going into the svg folder and getting the path for the sprite file */
            /* we don't want to begin with a forward slash because */
            /* we don't want to go to the base of the current domain */
            /* instead, we want to go up 2 folders */
            background-image: url('../../assets/images/sprites/sprite-e79e95cc.svg');
        }

.no-svg .icon {
            background-image: url('../../assets/images/sprites/sprite-e79e95cc.png');
        }

/* we want to use a variable, leave an opening in the template that the package can fill in with info for each icon */

.icon--clear-view-escapes {
        /* all icon rules will have their specific info specified */
        width: 144.4px;
        height: 61.53px;
        
        /* instead of going with something like 15px (from the left) [and] 80px (from the top) */
        /* instead, we want something the template can fill in with unique data for each icon */
        /* we fill in its x and y coordinates */
        background-position: 0 0;
    }

/* any code we include between 'first' will only run once for the first item that gets looped through */

/* we want to use a variable, leave an opening in the template that the package can fill in with info for each icon */

.icon--comment {
        /* all icon rules will have their specific info specified */
        width: 66px;
        height: 66px;
        
        /* instead of going with something like 15px (from the left) [and] 80px (from the top) */
        /* instead, we want something the template can fill in with unique data for each icon */
        /* we fill in its x and y coordinates */
        background-position: 99.71014492753623% 0;
    }

/* any code we include between 'first' will only run once for the first item that gets looped through */

/* we want to use a variable, leave an opening in the template that the package can fill in with info for each icon */

.icon--facebook {
        /* all icon rules will have their specific info specified */
        width: 23.23px;
        height: 44.01px;
        
        /* instead of going with something like 15px (from the left) [and] 80px (from the top) */
        /* instead, we want something the template can fill in with unique data for each icon */
        /* we fill in its x and y coordinates */
        background-position: 26.424310365536293% 45.92133741323979%;
    }

/* any code we include between 'first' will only run once for the first item that gets looped through */

/* we want to use a variable, leave an opening in the template that the package can fill in with info for each icon */

.icon--fire {
        /* all icon rules will have their specific info specified */
        width: 58px;
        height: 66px;
        
        /* instead of going with something like 15px (from the left) [and] 80px (from the top) */
        /* instead, we want something the template can fill in with unique data for each icon */
        /* we fill in its x and y coordinates */
        background-position: 0 99.58035714285714%;
    }

/* any code we include between 'first' will only run once for the first item that gets looped through */

/* we want to use a variable, leave an opening in the template that the package can fill in with info for each icon */

.icon--globe {
        /* all icon rules will have their specific info specified */
        width: 66px;
        height: 66px;
        
        /* instead of going with something like 15px (from the left) [and] 80px (from the top) */
        /* instead, we want something the template can fill in with unique data for each icon */
        /* we fill in its x and y coordinates */
        background-position: 28.019323671497585% 99.58035714285714%;
    }

/* any code we include between 'first' will only run once for the first item that gets looped through */

/* we want to use a variable, leave an opening in the template that the package can fill in with info for each icon */

.icon--instagram {
        /* all icon rules will have their specific info specified */
        width: 44.01px;
        height: 44.01px;
        
        /* instead of going with something like 15px (from the left) [and] 80px (from the top) */
        /* instead, we want something the template can fill in with unique data for each icon */
        /* we fill in its x and y coordinates */
        background-position: 63.059522249879905% 49.25740726919919%;
    }

/* any code we include between 'first' will only run once for the first item that gets looped through */

/* we want to use a variable, leave an opening in the template that the package can fill in with info for each icon */

.icon--mail {
        /* all icon rules will have their specific info specified */
        width: 66px;
        height: 50px;
        
        /* instead of going with something like 15px (from the left) [and] 80px (from the top) */
        /* instead, we want something the template can fill in with unique data for each icon */
        /* we fill in its x and y coordinates */
        background-position: 0 48.0703125%;
    }

/* any code we include between 'first' will only run once for the first item that gets looped through */

/* we want to use a variable, leave an opening in the template that the package can fill in with info for each icon */

.icon--rain {
        /* all icon rules will have their specific info specified */
        width: 66px;
        height: 66px;
        
        /* instead of going with something like 15px (from the left) [and] 80px (from the top) */
        /* instead, we want something the template can fill in with unique data for each icon */
        /* we fill in its x and y coordinates */
        background-position: 99.71014492753623% 58.92857142857143%;
    }

/* any code we include between 'first' will only run once for the first item that gets looped through */

/* we want to use a variable, leave an opening in the template that the package can fill in with info for each icon */

.icon--star {
        /* all icon rules will have their specific info specified */
        width: 66px;
        height: 66px;
        
        /* instead of going with something like 15px (from the left) [and] 80px (from the top) */
        /* instead, we want something the template can fill in with unique data for each icon */
        /* we fill in its x and y coordinates */
        background-position: 59.90338164251208% 99.58035714285714%;
    }

/* any code we include between 'first' will only run once for the first item that gets looped through */

/* we want to use a variable, leave an opening in the template that the package can fill in with info for each icon */

.icon--twitter {
        /* all icon rules will have their specific info specified */
        width: 53.78px;
        height: 44.06px;
        
        /* instead of going with something like 15px (from the left) [and] 80px (from the top) */
        /* instead, we want something the template can fill in with unique data for each icon */
        /* we fill in its x and y coordinates */
        background-position: 94.15199343125627% 98.55159026429745%;
    }

/* any code we include between 'first' will only run once for the first item that gets looped through */

/* we want to use a variable, leave an opening in the template that the package can fill in with info for each icon */

.icon--wifi {
        /* all icon rules will have their specific info specified */
        width: 62px;
        height: 66px;
        
        /* instead of going with something like 15px (from the left) [and] 80px (from the top) */
        /* instead, we want something the template can fill in with unique data for each icon */
        /* we fill in its x and y coordinates */
        background-position: 68.43601895734596% 0;
    }

/* any code we include between 'first' will only run once for the first item that gets looped through */

/* we want to use a variable, leave an opening in the template that the package can fill in with info for each icon */

.icon--youtube {
        /* all icon rules will have their specific info specified */
        width: 36.75px;
        height: 44px;
        
        /* instead of going with something like 15px (from the left) [and] 80px (from the top) */
        /* instead, we want something the template can fill in with unique data for each icon */
        /* we fill in its x and y coordinates */
        background-position: 37.76931216931217% 45.917910447761194%;
    }

.site-footer {
    background-color: #2f5572;
    /* change text color to white */
    color: #FFF;
    /* give some vertical padding but no horizontal padding */
    padding: 0.5rem 0;
    /* horizontally align the content to be centered */
    text-align: center;
}

.site-footer__text {
        display: block;
        /* add some bottom margin after the white text so there is space before the orange button */
        margin-bottom: 1rem;
        
        font-weight: 200;
    }

/* once the screen is large enough to be considered medium */

@media (min-width: 800px) {

.site-footer__text {
            /* set it back to an inline level element */
            display: inline;
            /* no longer need bottom margin */
            margin-bottom: 0;
            /* add horizontal spacing between the white text and the orange button */
            margin-right: 1.4rem
    }
    }

.site-header {
    /* give some vertical padding (can be 10px) but no horizontal padding */
    padding: 10px 0;
    /* have the site header overlay the large hero section */
    position: absolute;
    /* when an element is positioned absolutely, by default, it will try to shrink-wrap */
    /* and only use as much space as it needs to fit its content */
    /* change to take up the whole width of the page */
    width: 100%;
    /* the large hero block that is currently overlapping the site header does not have a z index value */
    /* but the element with a higher z-index value gets placed on top; we want the site header on top */
    z-index: 2;
    
    /* have the menu fade into view gradually */
    /* when this element's background color changes, we want it to gradually */
    /* transition to the new value over the course of a certain period of time */
    /* at 0.3 seconds the transition or fade will be fairly quick */
    /* be default, the transition will be linear, but we choose ease-out */
    -webkit-transition: background-color 0.3s ease-out;
    transition: background-color 0.3s ease-out;
    
    /* because our logo is taller than any of the content of the button or list, */
    
}

/* create a new modifier with & so we don't have to type site-header again */

.site-header--is-expanded {
        background-color: rgba(47,85,114, 0.55);
    }

@media (min-width: 800px) {

.site-header {
        /* lock the element to the top of the screen as we scroll */
        position: fixed;
        /* transparent blue */
        /* the postcss-hexrgba plugin automatically converts hexadecimal color codes to rgb values 47, 85, 114 */
        background-color: rgba(47,85,114, 0.3)
        
        /* use a darker blue for the header when we scroll down */
    
}
        .site-header--dark {
            background-color: rgba(23, 51, 72, 0.85);
        }
    }

@media (min-width: 800px) {

.site-header__btn-container {
            float: right
    }
    }

/* that way, the containing element that gives us the transparent blue background won't even be aware that the logo exists */

.site-header__logo {
        /* now the height of the bar is determined by the content of the get in touch button */
        position: absolute;
        /* the logo should be positioned at the very top so it's top position should be 0 */
        top: 0;
        /* pull it to the right, i.e. have 50% of the page width to the left of the logo */
        left: 50%;
        /* the previous line will pull the logo to far to the right */
        /* to center it, we need to pull the logo back to the left by an amount of half of it's own width */
        /* if we put 1 in the scale function, the logo would stay the same original size */
        /* we can decrease the size by going below a value of 1 */
        -webkit-transform: translateX(-50%) scale(0.8);
                transform: translateX(-50%) scale(0.8);
        
        /* the transform value should transition smoothly over the course of 0.3 seconds*/
        -webkit-transition: -webkit-transform 0.3s ease-out;
        transition: -webkit-transform 0.3s ease-out;
        transition: transform 0.3s ease-out;
        transition: transform 0.3s ease-out, -webkit-transform 0.3s ease-out; 
        
        /* by default, when we use transform: scale, */
        /* the element considers its perfect center to be the origin of the tranform, */
        /* meaning it shrink equally in all 4 directions so that its center is still positioned */
        /* in the same place as it was before the shrinking occured */
        /* by default, transform-origin: 50% 50%, meaning the perfect middle horizontally and vertically */
        /* if we change the vertical value to 0, then the element considers the top center its point of origin */
        -webkit-transform-origin: 50% 0;
                transform-origin: 50% 0;
        background-color: #2f5572;
        /* 25 pixels of vertical padding and 36 pixels of horizontal padding */
        padding: 25px 36px;
    }

/* undo the left and transform properties to put the logo on the top left */

@media (min-width: 800px) {

.site-header__logo {
            left: auto;
            -webkit-transform: translateX(0);
                    transform: translateX(0)
            
            /* target the site-header class when it's using the dark modifier */
            /* we add a space to create a descendant selector */
            /* the ampersand & will give us the selector for the __logo element */
            /* this whole selector will target the logo only when the dark header is being used */
    }
            .site-header--dark .site-header__logo {
                /* shrink the element */
                /* once the dark header is used, the logo will fit in the bar */
                -webkit-transform: scale(0.56);
                        transform: scale(0.56);
            }
    }

/* we need to remove the clear view escapes logo from the natural flow of the page */

.site-header__logo__graphic {
        /* hide the text */
        text-indent: -9999px
    }

/* the transparent blue bar is expanding vertically to fit the logo */

.site-header__menu-icon {
        /* create a square */
        width: 20px;
        height: 19px;
        /* position in the top right corner */
        position: absolute;
        /* when we adjust the z-index value of the menu content div, and once the menu content is visible, */
        /* the menu content is overlapping the menu icon and thus, */
        /* we cannot click on the menu icon again to hide the menu content back */
        /* we fix this by giving the menu icon a larger z-index value */
        z-index: 10;
        /* sit down from the very top by 10 pixels */
        top: 10px;
        /* sit in from the very far right by 10 pixels */
        right: 10px;
        
        /* code for the top bar */
    }

/* the ::before creates a pseudo element that we can style to look just like the top bar */

.site-header__menu-icon::before {
            /* in order to make sure the pseudo element appears, we use content and an empty pair of quotes */
            content: "";
            
            position: absolute;
            top: 0;
            left: 0;
            width: 20px;
            height: 3px;
            background-color: #FFF;
            /* by default, web browsers use transform-orgin: 50% 50%, */
            /* for the horizontal and vertical center of the element */
            /* if we want to set the top left corner of the element to be the transform origin, we use 0 0 */
            -webkit-transform-origin: 0 0;
                    transform-origin: 0 0;
            /* we don't want to abruptly switch between the 3 bars and the X icons */
            /* we want to the shapes and the icons to animate */
            /* and gradually transform and transition into the other shape */
            /* we want to transition the transform property over the course of 300 milliseconds */
            /* with an ease-out transition style */
            -webkit-transition: -webkit-transform 0.3s ease-out;
            transition: -webkit-transform 0.3s ease-out;
            transition: transform 0.3s ease-out;
            transition: transform 0.3s ease-out, -webkit-transform 0.3s ease-out;
        }

/* code for the middle bar */

.site-header__menu-icon__middle {
            position: absolute;
            /* instead of in the top corner of its parent div, have it sit 8 pixels down from the top */
            top: 8px;
            left: 0;
            width: 20px;
            height: 3px;
            background-color: #FFF;
            /* transition the opacity property over the course of 300 milliseconds */
            /* with the ease-out transition style */
            /* instead of transitioning out only its opacity property, we transition all properties */
            /* because we also transformed its scaleX property */
            -webkit-transition: all 0.3s ease-out;
            transition: all 0.3s ease-out;
            /* set the transform origin to be horizontally 0 (the left  edge) */
            /* and the vertically to be 50%, which is the perfect center */
            /* the middle bar not only fades away with opacity, */
            /* but now it also shrinks or retracts in to the left edge */
            -webkit-transform-origin: 0 50%;
                    transform-origin: 0 50%;
        }

/* code for the bottom bar */

.site-header__menu-icon::after {
            position: absolute;
            content: "";
            /* have the bottom bar sit at the very bottom */
            bottom: 0;
            left: 0;
            width: 20px;
            height: 3px;
            background-color: #FFF;
            /* we want the bottom left corner of the element to be the transform origin */
            /* 0 points towards the left corner and 100% points towards the very vertical bottom */
            -webkit-transform-origin: 0 100%;
                    transform-origin: 0 100%;
            /* we don't want to abruptly switch between the 3 bars and the X icons */
            /* we want to the shapes and the icons to animate */
            /* and gradually transform and transition into the other shape */
            /* we want to transition the transform property over the course of 300 milliseconds */
            /* with an ease-out transition style */
            -webkit-transition: -webkit-transform 0.3s ease-out;
            transition: -webkit-transform 0.3s ease-out;
            transition: transform 0.3s ease-out;
            transition: transform 0.3s ease-out, -webkit-transform 0.3s ease-out;
            
        }

/* the ampersand & refers to its parent selector __menu-icon */

@media (min-width: 800px) {

.site-header__menu-icon {
            /* hide the icon completely */
            display: none
    }
    }

/* and modify them, however we need to, in order to create the X */

.site-header__menu-icon--close-x {
        
        /* we cannot use the ampersand & because that would use the __menu-icon--close-x as our base */
    }

/* target the top horizontal bar */

.site-header__menu-icon--close-x::before {
            /* rotate 45 degrees clockwise so it appears diagonal */
            /* increase the top bar's width and not height size 1.25 times */
            -webkit-transform: rotate(45deg) scaleX(1.25);
                    transform: rotate(45deg) scaleX(1.25);
        }

/* our middle bar does not have close-x in its name */

.site-header__menu-icon--close-x .site-header__menu-icon__middle {
            /* hide the middle bar */
            opacity: 0;
            /* shrink down its width from 100% to 0 */
            -webkit-transform: scaleX(0);
                    transform: scaleX(0);
        }

/* target the bottom horizontal bar */

.site-header__menu-icon--close-x::after {
            /* rotate 45 degrees counter-clockwise so it appears diagonal */
            /* increase the top bar's width and not height size 1.25 times */
            /* translateY allows us to adjust the Y coordinate or vertical positioning for an element */
            /* we want to push the bar down by 1 pixel */
            -webkit-transform: rotate(-45deg) scaleX(1.25) translateY(1px);
                    transform: rotate(-45deg) scaleX(1.25) translateY(1px);
        }

/* within this rule, we can target each of the three horizontal bars */

.site-header__menu-content {
        /* make hidden by default */
        /* display: none; */
        /* instead, let's make the content still hidden initially */
        /* but once the is-visible modifier class is added, it will gradually fade to an opacity of 1 */
        opacity: 0;
        /* add a zoomout effect */
        /* make the content initially look bigger than where we want it to end up */
        /* 1 is the element's natural size and we'll make it 20% larger */
        -webkit-transform: scale(1.2);
                transform: scale(1.2);
        
        /* we want the transition for all properties to gradually change over course of 0.3 seconds */
        -webkit-transition: all 0.3s ease-out;
        transition: all 0.3s ease-out;
        /* because we are no longer using display: none to hide the menu content and instead using opacity, */
        /* this means that even though the content will be invisible initially, it will still exist in the browser */
        /* and it can still be clicked on; however, we don't want the user to be able to accidentally click on invisible content */
        /* so we use z-index and provide a negative value to ensure that the menu content, when hidden, */
        /* sits beneath all the other content on the page so that it cannot be accidentally clicked on */
        /* if using z-index, need position: relative, otherwise the browser won't acknowledge our z-index value */
        position: relative;
        z-index: -10;
        
        padding-top: 90px;
        text-align: center;
        
        /* revealing and hiding the nagivation links for small screens is */
        /* as simple as adjusting our css to target that is-visible modifier class */
    }

@media (min-width: 800px) {

.site-header__menu-content {
            /* reset everything to be normal for medium screens or larger */
            opacity: 1;
            z-index: 1;
            padding-top: 0;
            -webkit-transform: scale(1);
                    transform: scale(1)
    }
    }

/* the ampersand & refers to &__menu-content */

.site-header__menu-content--is-visible {
            /* opacity of 1 is fully visible */
            opacity: 1;
            /* when the content is ready to be visible, we give it a z-index of 1 */
            z-index: 1;
            /* place it back to its natural size */
            -webkit-transform: scale(1);
                    transform: scale(1);
        }

.primary-nav {
    /* create a vertical gap between "get in touch" and the three boxes */
    padding-top: 10px;
}

/* no vertical gap for larger screens */

@media (min-width: 800px) {

.primary-nav {
        padding-top: 0
}
    }

@media (min-width: 800px) {

.primary-nav--pull-right {
            float: right
    }
    }

/* unordered lists */

.primary-nav ul {
        margin: 0;
        padding: 0;
        /* create pseudo or fake content with css */
    }

/* will add blank space after all of the content in the main row div */

.primary-nav ul::after {
        content: "";
        /* clear our floats */
        clear: both;
        display: table;
    }

/* list items */

.primary-nav li {
        /* remove the bullets */
        list-style: none;
        /* will allow them to be horizontally centered */
        display: inline-block;
        
        padding-right: 7px;
    }

@media (min-width: 800px) {

.primary-nav li {
            padding-right: 20px;
            /* floated left so they will all sit on one line */
            float: left;
            
            display: block
    }
    }

/* the final list item in the list */

.primary-nav li:last-child {
        padding-right: 0;
    }

@media (min-width: 800px) {

.primary-nav li:last-child {
            padding-right: 20px
    }
    }

/* the rule targeting the link elements */

.primary-nav a {
        /* text should be white */
        color: #FFF;
        font-weight: 300;
        /* remove the underline */
        text-decoration: none;
        
        display: block;
        /* add some vertical padding and horizontal padding */
        padding: 5px 8px;
        
        font-size: 0.8rem;
        background-color: rgba(47,85,114, 0.5);
    }

@media (min-width: 800px) {

.primary-nav a {
            /* add some vertical padding but no horizontal padding (can be 12px) */
            padding: 12px 0;
            /* use a standard font-size of 1rem */
            font-size: 1rem;
            /* use not background color */
            background-color: transparent
            
            /* the ampersand & gives us the "a" selector */
            /* and apply only if it has a class of is-current-link */
    }
            .primary-nav a.is-current-link {
                /* we give the current link a light orange color */
                color: #fabb69;
            }
    }

/* begin with a class selector */

.reveal-item {
    /* hide the element initially be setting its opacity to 0 */
    opacity: 0;
    /* don't want to have it go from hidden to revealed in just 1 millisecond*/
    /* we want it to gradually fade in */
    /* the opacity property should gradualy change over the course of 1.5 seconds */
    /* use the ease-out transition style */
    /* instead of transitioning the opacity property, transition all properties */
    -webkit-transition: all 1.5s ease-out;
    transition: all 1.5s ease-out;
    
    /* set the baseline style to have a transform the scale is a little larger than normal */
    -webkit-transform: scale(1.15);
            transform: scale(1.15);
    /* and within our --is-visible modifier, set the transform to reset the scale to its normal size */
    /* this creates a nice zoom out effect */
    
    /* need to use JS to programmatically add the &--is-visible class to the hidden elements at */
    /* precisely the right moment when they are scrolled to */
}

/* ampersand & gives us .reveal-item, and then we add on a modifier */

.reveal-item--is-visible {
        opacity: 1;
        -webkit-transform: scale(1);
                transform: scale(1);
    }

.modal {
    /* we want to the modal div to be front and center no matter where the user has scrolled to */
    position: fixed;
    /* layer the modal div on top of all the other content; the highest z-index value should be positioned on top */
    z-index: 5;
    /* give the modal div a transparent white background */
    background-color: rgba(255, 255, 255, 0.94);
    /* we want the overlay to take up the full screen- the full available height and width */
    /* the full height */
    top: 0;
    bottom: 0;
    /* the full width */
    left: 0;
    right: 0;
    /* by default on page load, the modal is hidden */
    opacity: 0;
    /* it's invisible with opacity now but still layered over all our other content */
    /* we fix that with visibility: hidden */
    visibility: hidden;
    /* add a zoom out effect */
    /* initially have the content a little larger than normal */
    /* once the content is visible, we set it back to a scale of 1 */
    -webkit-transform: scale(1.2);
            transform: scale(1.2);
    /* we don't want the is-visible changes to happen abruptly in 1 millisecond */
    /* we want to animate or transition all properties smoothly over 0.3 seconds */
    -webkit-transition: all 0.3s ease-out;
    transition: all 0.3s ease-out;
}

.modal--is-visible {
        opacity: 1;
        /* offset the visibility: hidden */
        visibility: visible;
        -webkit-transform: scale(1);
                transform: scale(1);
    }

.modal__inner {
        /* vertically center the content within the height of the browser */
        position: absolute;
        /* elements positioned absolutely try to shrink wrap their size */
        /* but we want this element to keep its full width */
        width: 100%;
        /* to actually vertically center it, we want to push it down from the top 50% */
        top: 50%;
        /* top: 50% by itself pushes the content down to far */
        /* to fix that, we pull the content back up half of its own height */
        /* the Y means we only want to adjust its vertical positioning */
        -webkit-transform: translateY(-50%);
                transform: translateY(-50%);
    }

.modal__description {
        text-align: center;
        font-size: 1.3rem;
        font-weight: 300;
        /* more spacing between each line of text */
        line-height: 1.65;
    }

.modal__close {
        /* position the X in the top right corner */
        position: absolute;
        top: 15px;
        right: 15px;
        /* make the X larger */
        font-size: 2rem;
        /* stretch it horizontally to make it look more like a close icon and less like an X */
        -webkit-transform: scaleX(1.2);
                transform: scaleX(1.2);
        /* when the X expands, it expands towards the midle of the page and not closer to the top right */
        /* so that it doesn't appear to be closer to the edge of the screen than it originally was */
        /* set the transform origin to be the top right corner */
        /* to get to the right horizontally, we say go 100% */
        /* to stay in the top right vertically, we don't need to travel at all */
        -webkit-transform-origin: 100% 0;
                transform-origin: 100% 0;
        color: #2f5572;
        /* turn the cursor into a pointer hand like its a like */
        cursor: pointer;
    }

/* when it is hovered (the ampersand & gives us __close) */

.modal__close:hover {
            color: #d59541;
            
        }

.social-icons {
    text-align: center;
}

.social-icons__icon {
        background-color: #d59541;
        /* all of the social media icons will sit on a single line but inline-block will */
        /* let us give them a custom height if we need to */
        display: inline-block;
        /* add spacing between each icon */
        /* we don't need any top margin but we want 5px of spacing on the right, bottom, and left */
        margin: 0 5px 5px 5px;
        /* make each icon link the same size */
        width: 33%;
        height: 72px;
        
        position: relative;
        
        /* create a nested descendant selector rule */
    }

@media (min-width: 530px) {

.social-icons__icon {
            width: 72px;
            /* add horizontal spacing between each icon */
            margin: 0 5px
    }
    }

/* look for any element that has a class of icon */

.social-icons__icon .icon {
            /* the automated width and height values from our automated sprite setup */
            /* can actually be applied to the element */
            /* if we are making this icon element position: absolute, */
            /* we need to tell its parent element to be position: relative */
            display: block;
            /* center the icon within the large orange square */
            /* come down from the top and come in from the left 50% */
            position: absolute;
            top: 50%;
            left: 50%;
            /* top and left 50% would push the icon down to far to the bottom right corner */
            /* to have the icon perfectly centered, we pull it back up half of its own height and */
            /* pull it back to the left half of its own width */
            /* we use the translate function to control the positioning */
            -webkit-transform: translate(-50%, -50%);
                    transform: translate(-50%, -50%);
        }

